using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WPF1
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
    }


    // <StackPanel></StackPanel>  //размещает элементы в ряд по горизонтали или вертикали

    //Orientation="Horizontal" /позволяет задать способ отображения элементов (вертикаль, горизонталь)

    //<WrapPanel ItemHeight="30" ItemWidth="80"> //размещает элементы в горизонтальной или вертикальный ряд с переносом элементов

    //<DockPanel LastChildFill = "True">  //выравнивает элементы оп краю контейнера

    //<Grid.ColumnDefinitions> //выстраивает элементы в строки и колонки невидимой таблицы
    // <RowDefinition>

    //Grid.ColumnSpan and grid.RowSpan - позволяют разместить элемент в нескольких смежных ячейках

    //HorizontalAlignment and VerticalAligment - определяют позиции дочернего элемента внутри контейнера, если есть доп пространство

    //Margin - добавляет некоторое пространство вокруг элемента (нельзя использовать как метод компоновки, разметка окна)

    //MinWidth/MaxWidth, MinHeight/MaxHeight - устанавливают макс и мин размеры элемента

    //<Grid.RowDefinitions Height = "Auto" /> - автоматические размеры
    //<Grid.RowDefinitions Height = "150" />  - абсолютные размеры (px, in, cm, pt)
    // пропорциональные размеры - возможность задавать ширину или высоту одного столбца/строки в пропорции с другими столбцами/столбцами, отмечаются "*"

    //управление
    //Visibility="Hidden..." - позволяет задавать видимость элемента

    //FontStyle="Italic"  //свойства настройки шрифтов - позволяет настраивать отображение текста у элемента управления

    //свойства цветов Background - позволяет задать цвет фона элемента
    // Foreground - цвет текста элемента

    //BorderBrush - позволяет задать цвет обводки элемента, используется совместно со свойством Border

    //Элементы управления содержимым - это вид элементов управления, кот может хранить и отображать фрагмент содержимого (модет иметь еще один вложенный элемент)
    //может иметь только один элемент

    //У всех эл упр содержимым есть свойство Content, кот устанавливает сложенный элемент

    //Padding="50 30 0 40" Свойство отступа содержимого 

    //<Label>text<Label> - метка, для отображения небольшого объема
    //<TextBlock> TextWrapping="text" ... - перенос текста

    //Button - реагирует на клик/событие
    //Checkbox- флажок, кот можно установить ы три состояния: checked, Unchecked, Intermediate
    //RadioButton - переключатель внутри группы, объединяются одним именем и потом выбирается один из элементов

    //Всплывающие подсказки - ToolTip - позволяет добавить к элементам всплывающие подсказки 

    //Заголовки находятся в свойстве HeaderБ а сам элемент в свойстве Content: GroupBox, Expander, Tabltem

    //------------------------------------- 2 пара ---------------------------------------------------------

    //Текстовые элементы управления - в общем виде могут содержать только текст:

    //TextBlock (вывод текстовой информации содержимого элемента, может содержать вложенные элементы, для разбиения текста на составляющие
    //       LineHeilght - высота строк
    //       TextWrapping - перенос текста 
    //       TextAligment - выравнивание по центру, левому и правому краям

    //TextBox (предназначен для ввода и вывода текстовой информации, поддерживает все свойства TextBlock)
    //       MaxLength - задает максимальное число вводимых символов
    //       MaxLines and MinLines - определяет количество строк отображаемых в текстовом поле
    //       AccrptREturn - активировать переход на следующую строку при нажатии Enter
    //       AcceptTab - активация табуляции при нажатии Tab
    //       VerticalScrollBarVisibility and HorizontalScrollBarVisibility - отображают вертикаль и горизонталь прокрутки
    //       isReadOnly - блокировка редактирования во время прокрутки

    //RichTextBox - аналогичен textBox
    //PasswordBox - ввод парольной информаци, скрытие текста с помощью маски, не поддерживает работу с буфером обмена


    //Элемeнты управления списками -добавление элементов прямо в коллекцию items с помощью кода или XAML и
    // привязка данных - часто используется для работы с бд или другими внешними источниками

    //ListBox - создание списков переменной для, в которых пользователь может выбирать элементы
    //      SelectionMode - активирует множественный выбор 
    //ComboBox - отображение элемента в виде выпадающего списка
    //      IsSelected - выделяет данный элемент выбранный при запуске приложения
    //      IsEnabled - устанавливает данный элемент недоступным для выбора


    //Элементы выбора диапазона значений - данные элементы принимают числовое значение, которое находится в диапазоне между заданными минимальными и максимальными значениями 

    //Value - текущее значение элемента
    //Maximum and Minimum - верхний и нижний предел допустимых значений
    //SmallChange and LargeChange - величина, на кот увеличивается или уменьшается значение свойства Value при изменении
    //Slider - ползунок позволяет устанавливать числовое значение используя ползунок 
    //ProgressBar - индикатор прогресса
    //Calendar - свойства DisplayDateStart and DisplayDateEnd - начальная и конечная дата отображаемая в календаре
    //          DisplayMode - формат отображения дат (Month, Decade, Year)
    //          SelectionMode - определяет способ выделения дат
    //          DataPicer - ввод даты 

    //ScrollViewer - может вмещать в себя только один элемент, поэтому все элементы необходимо облачивать в еще один контейнер
    //      HorizontalScrollBarVisibility and VerticalScrollBarVisibility задают активность горизонтальной и вертикальной прокрутки
    //      CanContentScroll - активирует прокрутку по элементам (к началу следующего элемента)

    //Viewbox - может содержать один дочерний элемент и масштабирует его в зависимости от размеров окна
    //      Stretch -позволяет указать, как в занимаемой области должен масштабироваться дочерний элемент
    //      StretchDirection - указывает, какие операции разрешены

    //Image - работа с изображениями
    //TabControl - позволяет разделить интерфейс на несколько зон.  которые можно выбрать нажав на заголовок
    //ToolBar - панель инструментов: набор команд, обычно расположенный непосредственно под строкой меню в стандартном приложении винды
    //      WPFToolBar обычно помещаются внутри контейнера ToolBarTray - позволяет перемещать элементы пользователю

    //Menu - данный элемент служит для создания стандартных меню. Включает в себя MenuItem, в меню допускается делать кнопки
    //      ContextMenu - служит для создания контекстных всплывающих меню, отображающихся после нажатия на правую кнопку мыши. Сам по себе существовать не может

    // --------------------------------------------------------------- Тема «Окна» -----------------------------------------------------------------------


    /*
    Св-ва окна:
    1. Icome (Иконка). Иконка в верхнем левом углу экрана и в панели задач.
    2. Top и Left. Задают отступ от верхней левой границы экрана соответственно.
    3. ResizeMode. Задаёт режим изменения размеров окна. Может принимать следующие значения:
    3.1.  CanMinimize – окно можно только свернуть, мы не можем его растягивать
    3.2. NoResize – нельзя изменить начальные размеры
    3.3. CanResize – размеры менять можно
    3.4. CanResizeWithGrip – в правом нижнем углу окна появляется визуализация того, что у окна можно менять размеры (диагональные стрелочки у окна)
    4. Title – заголовок окна.
    5. WindowState – хранит состояние окна в любой момент. Мы можем это отcлеживать. Принимает значения:
    5.1. Maximized – раскрыто на весь экран
    5.2. Minimized – свёрнуто
    5.3. Normal – стандартное состояние

    В процессе работы окно проходит ряд этапов, которые могут быть доступны через обработку событий класса Window:
    1. Initialized – это событие возникает при инициализации окна, когда у него устанавливаются все свойства, но до применения к нему стилей и привязки данных.
    2. Loaded – возникает после полной инициализации окна и применения к нему стилей и привязки данных. После генерации этого события происходит визуализация элемента, и окно отображается на экране и становится на экране и становится видимым для пользователя
    3. Closing – возникает при закрытии окна.
    4. Closed – возникает, когда окно становится закрытым.
    5. Unloaded – возникает после закрытия окна при выгрузке всех связанных ресурсов из памяти.

    Чтобы назначить текущее окно владельцем какого-либо окна, необходимо в его файле логики прописать инструкцию:
    createToDo.Owner = this
    Окно createToDo будет владеть окном, в котором объявлена инструкция.
     Owner помогает обратиться из дочернего окна к родительскому окну. Иначе никак, т. к. невозможно пересоздать уже существующий объект (родительское окно).
    Нельзя размещать в методе загрузки окна. Обращение к  Owner не может быть в конструкторе и статических методах.

    DataGrid – это элемент управления отображением данных, который извлекает информацию из коллекции объектов и визуализирует её в таблице. Каждая строка соответствует отдельному объекту (чаще всего экземпляру класса), а каждый столбец — свойству этого объекта (чаще все свойства класса). Это тупо обычная таблица.
    Св-ва DataGrid:
    1. RowBackground и AlternativeRowBackground – кисть, которая используется для закрашивания фона позади каждой строки (RowBackground) и фон чередующихся строк (AlternativeRowBackground)
    2. ColumnHeaderHeight – высота строки, отображающей заголовки столбцов.
    3. ColumnWidth – установка ширины по умолчанию для каждого столбца
    4. RowHeight – высота строк
    5. GridKinesVisivility – указывает, какие линии отображаются в сетке (Horizontal, Vertical, None, All)
    6. HeadersVisibility – указывает, какие заголовки должны отображаться (Column, Row, All, None)
    7. AutoGenerateColumns – активирует автоматическое создание столбцов на основе переданных в ItemsSourse данных.
    8. CanUserDeleteRows – активирует возможность удаления строк при нажатии на кнопку Delete
    9. CanUserAddRows – добавляет пустую строку в конце списка, которая предназначена для добавления новых элементов.
    Так же DataGrid предоставлять возможность самостоятельно задавать столбцы для отображения.
     DataGrid поддерживает следующие варианты столбцов:
    1. DataGridTextColumn – отображает элемент TextBlock или TextBox при редактировании.
    2. DataGridHyperlinkColumn – представляет гиперссылку и позволяет переходить по указанному адресу.
    3. DataGridCheckBoxColumn – отображает элемент CheckBox
    4. DataGridComboBoxColumn – отображает выпадающий список — элемент ComboBox
    5. DataGridTemplateColumn – позволяет задать специфический шаблон для отображения столбца.

    Шаблон ячейки — CellTemplate
    Св-во CellTemplate элемента DataGridTemplateColumn предназначено для задания шаблона ячейки и может содержать в себе элемент DataTemplate. Это необходимо, например, когда при создания таблиц может понадобиться добавить в строку кнопку (например, для удаления или редактирования записи в строке).
    Детали строк. Это возможность элемента DataGrid выводить описание какой-либо строки при нажатии на неё. Данная возможность реализуется при помощи свойства RowDetailsTemplate. Данное свойство может содержать элемент DataTemplate.
    У элемента DataGrid также доступно свойство RowDetailsVisibilityMode, по умолчанию данное свойство установлено в значение VisibleWhenSelected (детали строки появляются при нажатии на неё)	, также есть возможность установить значение Visible (детали всех строк будут видны всегда) или Collapsed (блокирует просмотр деталей строки).

    MVC – Model view controller. Это паттерн проектирования, при котором приложение разделяется на три части — model (полноценная логика приложения — полноценные C#-файлы, может быть удалённым сервером), view (xaml-файл), controller (файл xaml.cs – связующий между model и view). Используется в WEB-разработке. Логика приложения отделена от отображения, но есть связующее звено.
    */


    //------------------------------------------------ работа с файловой системой --------------------------------------

    // Copy (исходный путь файла, финальный путь файла) - копирует файл в новое место. Если файл с таким названием уже существует, то вызывает исключение.
    // Create (путь к файлу) - создает файл. Если файл с таким названием существует, то он перезаписывается
    // Delete (путь) - удаляет файл
    // Move (исходный путь, финальный путь) перемещает файл в новое место. Может переименовывать новый файл
    // Exists (путь к файлу) - определяет существует ли указанный файл
    // Close() - закрывает поток, кот открывается при использовании большинства методов для работы с файлами. Необходимо вызывать данный метод для
    // высвобождения процессорного времени и завершения работы с файлом

    // AppendAllLines (путь к файлу, список строк) - добавляет в файл набор строк. Если файл не существует, то он создает
    // AppendAllText(путь к файлу, строка для записи) - добавляет в файл строку. Если файл не существует, то он создается
    // string[] ReadAllLines (путь к файлу) -считывает содержимое текстового файла
    // string ReadAllText (путь к файлу) - считывает содержимое текстового файла в строку
    // void WriteAllLines (путь к файлу, массив строк) - записывают массив строк в текстовый файл. Если файл не существует, он создается. Если такой же, то перезаписывается
    // WriteAllText (путь к файлу, строка для записи) - записывают строку в текстовый файл. Если файл не существует, он создается. Перезаписывается.

    // Directory.GetCurrentDirectory() - позволяет получить текущую директорию движения
    // system.IO.Path.Combine(строка 1, ... , строка 2) комбинирует от двух до четырех строк в виде пути к файлу.

    // свойства класса SaveFileDialog:
    // DefaultDirectory = устанавливают каталог, который будет открыт в диалоговом окне по умолчанию
    // FileName - хранит или устанавливает строку с полный путем до выбранного файла (в том числе название и расширение)
    // Filter - устанавливает возможные расширения файлов в диалоговом окне "Normal text file (*.txt)|*.txt". Первая часть до вертикальной черты определяет заголовок
    // фильтра, а после - расширение, которое требуется отображать

    // Если требуется более одного фильтра
    // OverwritePrompt - устанавливает, будет ли выводиться предупреждение о перезаписи существующего файла (true по умолчанию)
    // SaveFileDialog - содержит только название созданного файла
    // Title - устанавливает заголовок диалогового окна
    // ShowDialog - взывает диалоговое окно

    // Работа с JSON
    // string JsonSerializer.Serialize (Объект сереализации) - для формирования строки в формате джсон 
    // T JsonSerializer.Deserialize<T> (строка в формате джсон) - для преобразования строки в формат Т.
    // Для десериализации нужно, чтобы у класса Т был объявлен пустой конструктор

    // Команды WPF - это действия
    // 



}